//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class SanPhamClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param offset (optional) 
     * @param limit (optional) 
     * @return Success
     */
    newArrivals(offset: string | undefined, limit: string | undefined , cancelToken?: CancelToken | undefined): Promise<SanPham[]> {
        let url_ = this.baseUrl + "/api/SanPham/new-arrivals?";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNewArrivals(_response);
        });
    }

    protected processNewArrivals(response: AxiosResponse): Promise<SanPham[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<SanPham[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SanPham[]>(null as any);
    }

    /**
     * @param offset (optional) 
     * @param limit (optional) 
     * @return Success
     */
    mostViewed(offset: string | undefined, limit: string | undefined , cancelToken?: CancelToken | undefined): Promise<SanPham[]> {
        let url_ = this.baseUrl + "/api/SanPham/most-viewed?";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMostViewed(_response);
        });
    }

    protected processMostViewed(response: AxiosResponse): Promise<SanPham[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<SanPham[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SanPham[]>(null as any);
    }
}

export class TheLoaiClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Success
     */
    theLoai(  cancelToken?: CancelToken | undefined): Promise<TheLoai[]> {
        let url_ = this.baseUrl + "/api/TheLoai";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTheLoai(_response);
        });
    }

    protected processTheLoai(response: AxiosResponse): Promise<TheLoai[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<TheLoai[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TheLoai[]>(null as any);
    }
}

export class WeatherForecastClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Success
     */
    weatherForecast(  cancelToken?: CancelToken | undefined): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processWeatherForecast(_response);
        });
    }

    protected processWeatherForecast(response: AxiosResponse): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<WeatherForecast[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export interface BangSize {
    maSize?: string | undefined;
    tenSize?: string | undefined;
    chiTietSanPham?: ChiTietSanPham[] | undefined;
}

export interface ChiTietGioHang {
    idGh?: number;
    maCtSp?: string | undefined;
    soLuong?: number | undefined;
    gia?: number | undefined;
    idGhNavigation?: GioHang;
    maCtSpNavigation?: ChiTietSanPham;
}

export interface ChiTietKhuyenMai {
    maKm?: string | undefined;
    maCtSp?: string | undefined;
    phanTramGiam?: number | undefined;
    maCtSpNavigation?: ChiTietSanPham;
    maKmNavigation?: KhuyenMai;
}

export interface ChiTietPhieuNhap {
    maPn?: string | undefined;
    maCtSp?: string | undefined;
    soLuong?: number | undefined;
    gia?: number | undefined;
    maCtSpNavigation?: ChiTietSanPham;
    maPnNavigation?: PhieuNhap;
}

export interface ChiTietPhieuTra {
    maPt?: string | undefined;
    maCtSp?: string | undefined;
    soLuong?: number | undefined;
    maCtSpNavigation?: ChiTietSanPham;
    maPtNavigation?: PhieuTra;
}

export interface ChiTietSanPham {
    maCtSp?: string | undefined;
    maSp?: string | undefined;
    maSize?: string | undefined;
    gia?: number | undefined;
    slTon?: number | undefined;
    maSizeNavigation?: BangSize;
    maSpNavigation?: SanPham;
    chiTietGioHang?: ChiTietGioHang[] | undefined;
    chiTietKhuyenMai?: ChiTietKhuyenMai[] | undefined;
    chiTietPhieuNhap?: ChiTietPhieuNhap[] | undefined;
    chiTietPhieuTra?: ChiTietPhieuTra[] | undefined;
}

export interface GioHang {
    idGh?: number;
    maKh?: string | undefined;
    hoTen?: string | undefined;
    sdt?: string | undefined;
    email?: string | undefined;
    ngayTao?: Date | undefined;
    diaChi?: string | undefined;
    trangThai?: number | undefined;
    maNvDuyet?: string | undefined;
    maNvGiao?: string | undefined;
    maKhNavigation?: KhachHang;
    maNvDuyetNavigation?: NhanVien;
    maNvGiaoNavigation?: NhanVien;
    hoaDon?: HoaDon;
    chiTietGioHang?: ChiTietGioHang[] | undefined;
}

export interface HoaDon {
    maHd?: string | undefined;
    idGh?: number;
    ngayTao?: Date;
    idGhNavigation?: GioHang;
    phieuTra?: PhieuTra[] | undefined;
}

export interface KhachHang {
    maKh?: string | undefined;
    hoTen?: string | undefined;
    sdt?: string | undefined;
    email?: string | undefined;
    diaChi?: string | undefined;
    maSoThue?: string | undefined;
    maTk?: string | undefined;
    maTkNavigation?: TaiKhoan;
    gioHang?: GioHang[] | undefined;
}

export interface KhuyenMai {
    maKm?: string | undefined;
    maNv?: string | undefined;
    ngayApDung?: Date | undefined;
    maNvNavigation?: NhanVien;
    chiTietKhuyenMai?: ChiTietKhuyenMai[] | undefined;
}

export interface NhanVien {
    maNv?: string | undefined;
    hoTen?: string | undefined;
    sdt?: string | undefined;
    email?: string | undefined;
    diaChi?: string | undefined;
    cmnd?: string | undefined;
    maTk?: string | undefined;
    maTkNavigation?: TaiKhoan;
    gioHangMaNvDuyetNavigation?: GioHang[] | undefined;
    gioHangMaNvGiaoNavigation?: GioHang[] | undefined;
    khuyenMai?: KhuyenMai[] | undefined;
    phieuNhap?: PhieuNhap[] | undefined;
    phieuTra?: PhieuTra[] | undefined;
}

export interface PhieuNhap {
    maPn?: string | undefined;
    ngayTao?: Date | undefined;
    maNv?: string | undefined;
    maNvNavigation?: NhanVien;
    chiTietPhieuNhap?: ChiTietPhieuNhap[] | undefined;
}

export interface PhieuTra {
    maPt?: string | undefined;
    maHd?: string | undefined;
    ngayTao?: Date | undefined;
    maNv?: string | undefined;
    maHdNavigation?: HoaDon;
    maNvNavigation?: NhanVien;
    chiTietPhieuTra?: ChiTietPhieuTra[] | undefined;
}

export interface Quyen {
    maQuyen?: string | undefined;
    tenQuyen?: string | undefined;
    taiKhoan?: TaiKhoan[] | undefined;
}

export interface SanPham {
    maSp?: string | undefined;
    tenSp?: string | undefined;
    maTl?: string | undefined;
    luotXem?: number | undefined;
    ngayTao?: Date | undefined;
    hinhAnh?: string | undefined;
    maTlNavigation?: TheLoai;
    chiTietSanPham?: ChiTietSanPham[] | undefined;
}

export interface TaiKhoan {
    maTk?: string | undefined;
    matKhau?: string | undefined;
    maQuyen?: string | undefined;
    maQuyenNavigation?: Quyen;
    khachHang?: KhachHang;
    nhanVien?: NhanVien;
}

export interface TheLoai {
    maTl?: string | undefined;
    tenTl?: string | undefined;
    capTl?: number | undefined;
    maTlCha?: string | undefined;
    sanPham?: SanPham[] | undefined;
}

export interface WeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}